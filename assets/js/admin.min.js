jQuery(document).ready(function($) {
    'use strict';
    
    let mediaUploader;
    let imageCounter = 0;
    
    // Initialize
    init();
    
    function init() {
        initSortable();
        bindEvents();
        generateSlugFromName();
        
        // Count existing images
        imageCounter = $('.image-item').length;
    }
    
    function bindEvents() {
        // Form submission
        $('#carousel-form').on('submit', handleFormSubmit);
        
        // Media uploader
        $('#add-images-btn').on('click', openMediaUploader);
        
        // Remove all images
        $('#remove-all-btn').on('click', removeAllImages);
        
        // Remove individual image
        $(document).on('click', '.remove-image', removeImage);
        
        // Table actions
        $('.delete-carousel').on('click', deleteCarousel);
        $('.duplicate-carousel').on('click', duplicateCarousel);
        $('.status-toggle').on('click', toggleCarouselStatus);
        
        // Auto-generate slug from name
        $('#carousel-name').on('input', generateSlugFromName);
        
        // Copy shortcode on click
        $(document).on('click', 'code', function() {
            selectText(this);
        });
    }
    
    function initSortable() {
        $('#carousel-images').sortable({
            items: '.image-item',
            handle: '.image-handle',
            placeholder: 'image-item-placeholder',
            tolerance: 'pointer',
            cursor: 'move',
            opacity: 0.8,
            update: function(event, ui) {
                updateImageOrder();
            }
        });
    }
    
    function generateSlugFromName() {
        const name = $('#carousel-name').val();
        const slug = name.toLowerCase()
            .replace(/[^a-z0-9\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-')
            .trim('-');
        
        $('#carousel-slug').val(slug);
    }
    
    function openMediaUploader(e) {
        e.preventDefault();
        
        if (mediaUploader) {
            mediaUploader.open();
            return;
        }
        
        mediaUploader = wp.media({
            title: 'Select Images for Carousel',
            button: {
                text: 'Add to Carousel'
            },
            multiple: true,
            library: {
                type: 'image'
            }
        });
        
        mediaUploader.on('select', function() {
            const attachments = mediaUploader.state().get('selection').toJSON();
            addImagesToCarousel(attachments);
        });
        
        mediaUploader.open();
    }
    
    function addImagesToCarousel(attachments) {
        const $container = $('#carousel-images');
        const $placeholder = $('.no-images-placeholder');
        
        // Remove placeholder if it exists
        $placeholder.remove();
        
        attachments.forEach(function(attachment) {
            const imageData = {
                attachment_id: attachment.id,
                sort_order: imageCounter,
                alt_text: attachment.alt || attachment.title || '',
                caption: attachment.caption || '',
                link_url: '',
                thumbnail_url: attachment.sizes && attachment.sizes.thumbnail ? 
                    attachment.sizes.thumbnail.url : attachment.url,
                index: imageCounter
            };
            
            const imageHtml = renderImageItem(imageData);
            $container.append(imageHtml);
            imageCounter++;
        });
        
        updateImageOrder();
        showNotice('Images added successfully', 'success');
    }
    
    function renderImageItem(data) {
        const template = $('#image-item-template').html();
        
        return template
            .replace(/\{\{attachment_id\}\}/g, data.attachment_id)
            .replace(/\{\{sort_order\}\}/g, data.sort_order)
            .replace(/\{\{alt_text\}\}/g, escapeHtml(data.alt_text))
            .replace(/\{\{caption\}\}/g, escapeHtml(data.caption))
            .replace(/\{\{link_url\}\}/g, escapeHtml(data.link_url))
            .replace(/\{\{thumbnail_url\}\}/g, data.thumbnail_url)
            .replace(/\{\{index\}\}/g, data.index);
    }
    
    function removeImage(e) {
        e.preventDefault();
        
        if (!confirm('Are you sure you want to remove this image?')) {
            return;
        }
        
        const $imageItem = $(this).closest('.image-item');
        $imageItem.fadeOut(300, function() {
            $(this).remove();
            updateImageOrder();
            
            // Show placeholder if no images left
            if ($('#carousel-images .image-item').length === 0) {
                showNoImagesPlaceholder();
            }
        });
    }
    
    function removeAllImages(e) {
        e.preventDefault();
        
        if (!confirm('Are you sure you want to remove all images?')) {
            return;
        }
        
        $('#carousel-images .image-item').fadeOut(300, function() {
            $(this).remove();
            showNoImagesPlaceholder();
        });
    }
    
    function showNoImagesPlaceholder() {
        const placeholder = `
            <div class="no-images-placeholder">
                <span class="dashicons dashicons-images-alt2"></span>
                <p>No images added yet. Click "Add Images" to get started.</p>
            </div>
        `;
        $('#carousel-images').append(placeholder);
    }
    
    function updateImageOrder() {
        $('#carousel-images .image-item').each(function(index) {
            $(this).find('input[name*="[sort_order]"]').val(index);
            
            // Update input names to maintain proper indexing
            const newIndex = index;
            $(this).find('input, textarea').each(function() {
                const name = $(this).attr('name');
                if (name) {
                    const newName = name.replace(/\[\d+\]/, '[' + newIndex + ']');
                    $(this).attr('name', newName);
                }
            });
        });
    }
    
    function handleFormSubmit(e) {
        e.preventDefault();
        
        const $form = $(this);
        const $submitBtn = $form.find('input[type="submit"]');
        const originalText = $submitBtn.val();
        
        // Validate required fields
        if (!validateForm($form)) {
            return;
        }
        
        // Show loading state
        $submitBtn.addClass('loading').val(advancedCarousel.strings.saving);
        
        const formData = new FormData($form[0]);
        formData.append('action', 'save_carousel');
        formData.append('nonce', advancedCarousel.nonce);
        
        $.ajax({
            url: advancedCarousel.ajax_url,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    showNotice(response.data.message, 'success');
                    
                    // Redirect to edit page if creating new carousel
                    if (response.data.redirect_url && !$('input[name="carousel_id"]').val()) {
                        setTimeout(function() {
                            window.location.href = response.data.redirect_url;
                        }, 1500);
                    }
                } else {
                    showNotice(response.data || advancedCarousel.strings.error, 'error');
                }
            },
            error: function() {
                showNotice(advancedCarousel.strings.error, 'error');
            },
            complete: function() {
                $submitBtn.removeClass('loading').val(originalText);
            }
        });
    }
    
    function validateForm($form) {
        let isValid = true;
        
        // Check required fields
        $form.find('[required]').each(function() {
            if (!$(this).val().trim()) {
                $(this).focus().addClass('error');
                showNotice('Please fill in all required fields', 'error');
                isValid = false;
                return false;
            }
        });
        
        // Validate slug format
        const slug = $('#carousel-slug').val();
        if (slug && !/^[a-z0-9-]+$/.test(slug)) {
            $('#carousel-slug').focus().addClass('error');
            showNotice('Slug can only contain lowercase letters, numbers, and hyphens', 'error');
            isValid = false;
        }
        
        return isValid;
    }
    
    function deleteCarousel(e) {
        e.preventDefault();
        
        if (!confirm(advancedCarousel.strings.confirm_delete)) {
            return;
        }
        
        const $button = $(this);
        const carouselId = $button.data('carousel-id');
        const $row = $button.closest('tr');
        
        $button.addClass('loading');
        
        $.ajax({
            url: advancedCarousel.ajax_url,
            type: 'POST',
            data: {
                action: 'delete_carousel',
                carousel_id: carouselId,
                nonce: advancedCarousel.nonce
            },
            success: function(response) {
                if (response.success) {
                    $row.fadeOut(300, function() {
                        $(this).remove();
                        
                        // Check if table is empty
                        if ($('.carousel-table-container tbody tr').length === 0) {
                            location.reload();
                        }
                    });
                    showNotice(response.data, 'success');
                } else {
                    showNotice(response.data || advancedCarousel.strings.error, 'error');
                }
            },
            error: function() {
                showNotice(advancedCarousel.strings.error, 'error');
            },
            complete: function() {
                $button.removeClass('loading');
            }
        });
    }
    
    function duplicateCarousel(e) {
        e.preventDefault();
        
        const $button = $(this);
        const carouselId = $button.data('carousel-id');
        
        $button.addClass('loading');
        
        $.ajax({
            url: advancedCarousel.ajax_url,
            type: 'POST',
            data: {
                action: 'duplicate_carousel',
                carousel_id: carouselId,
                nonce: advancedCarousel.nonce
            },
            success: function(response) {
                if (response.success) {
                    showNotice(response.data.message, 'success');
                    
                    // Redirect to edit page
                    setTimeout(function() {
                        window.location.href = response.data.edit_url;
                    }, 1500);
                } else {
                    showNotice(response.data || advancedCarousel.strings.error, 'error');
                }
            },
            error: function() {
                showNotice(advancedCarousel.strings.error, 'error');
            },
            complete: function() {
                $button.removeClass('loading');
            }
        });
    }
    
    function toggleCarouselStatus(e) {
        e.preventDefault();
        
        const $toggle = $(this);
        const carouselId = $toggle.data('carousel-id');
        const currentStatus = $toggle.data('status');
        const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
        
        $toggle.addClass('loading');
        
        $.ajax({
            url: advancedCarousel.ajax_url,
            type: 'POST',
            data: {
                action: 'update_carousel_status',
                carousel_id: carouselId,
                status: newStatus,
                nonce: advancedCarousel.nonce
            },
            success: function(response) {
                if (response.success) {
                    // Update UI
                    $toggle.data('status', newStatus);
                    $toggle.find('.status-indicator')
                        .removeClass('status-' + currentStatus)
                        .addClass('status-' + newStatus);
                    $toggle.contents().last()[0].textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                    
                    showNotice(response.data, 'success');
                } else {
                    showNotice(response.data || advancedCarousel.strings.error, 'error');
                }
            },
            error: function() {
                showNotice(advancedCarousel.strings.error, 'error');
            },
            complete: function() {
                $toggle.removeClass('loading');
            }
        });
    }
    
    function showNotice(message, type) {
        const $notice = $(`<div class="notice notice-${type}"><p>${message}</p></div>`);
        
        // Remove existing notices
        $('.notice').remove();
        
        // Add new notice
        $('.wrap').after($notice);
        
        // Auto-hide after 5 seconds
        setTimeout(function() {
            $notice.fadeOut(300, function() {
                $(this).remove();
            });
        }, 5000);
        
        // Scroll to top to show notice
        $('html, body').animate({ scrollTop: 0 }, 300);
    }
    
    function selectText(element) {
        if (document.selection) {
            // IE
            const range = document.body.createTextRange();
            range.moveToElementText(element);
            range.select();
        } else if (window.getSelection) {
            // Other browsers
            const range = document.createRange();
            range.selectNode(element);
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
        }
        
        // Copy to clipboard if supported
        if (navigator.clipboard) {
            navigator.clipboard.writeText(element.textContent).then(function() {
                showNotice('Shortcode copied to clipboard!', 'success');
            });
        }
    }
    
    function escapeHtml(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        
        return text.replace(/[&<>"']/g, function(m) {
            return map[m];
        });
    }
    
    // Remove error class on input
    $(document).on('input change', '.error', function() {
        $(this).removeClass('error');
    });
    
    // Enhanced style selection with preview
    $('.style-option input[type="radio"]').on('change', function() {
        if ($(this).is(':checked')) {
            $('.style-card').removeClass('selected');
            $(this).next('.style-card').addClass('selected');
        }
    });
    
    // Auto-save draft functionality (optional)
    let autoSaveTimer;
    $('#carousel-form input, #carousel-form textarea, #carousel-form select').on('input change', function() {
        clearTimeout(autoSaveTimer);
        autoSaveTimer = setTimeout(function() {
            // Auto-save logic can be implemented here
            console.log('Auto-saving...');
        }, 5000);
    });
    
    // Keyboard shortcuts
    $(document).on('keydown', function(e) {
        // Ctrl+S / Cmd+S to save
        if ((e.ctrlKey || e.metaKey) && e.which === 83) {
            e.preventDefault();
            $('#carousel-form').submit();
        }
        
        // Escape to close modals/dialogs
        if (e.which === 27) {
            $('.media-modal-close').click();
        }
    });
    
    // Image upload via drag and drop
    $('#carousel-images').on('dragover', function(e) {
        e.preventDefault();
        $(this).addClass('drag-over');
    }).on('dragleave', function(e) {
        e.preventDefault();
        $(this).removeClass('drag-over');
    }).on('drop', function(e) {
        e.preventDefault();
        $(this).removeClass('drag-over');
        
        const files = e.originalEvent.dataTransfer.files;
        if (files.length > 0) {
            handleFileUpload(files);
        }
    });
    
    function handleFileUpload(files) {
        const formData = new FormData();
        
        Array.from(files).forEach(function(file, index) {
            if (file.type.startsWith('image/')) {
                formData.append('files[]', file);
            }
        });
        
        if (formData.has('files[]')) {
            formData.append('action', 'upload_carousel_images');
            formData.append('nonce', advancedCarousel.nonce);
            
            $.ajax({
                url: advancedCarousel.ajax_url,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        // Add uploaded images to carousel
                        addImagesToCarousel(response.data.attachments);
                    } else {
                        showNotice(response.data || 'Upload failed', 'error');
                    }
                },
                error: function() {
                    showNotice('Upload failed', 'error');
                }
            });
        }
    }
    
    // Bulk actions
    let selectedCarousels = [];
    
    $('.carousel-table-container').on('change', '.select-carousel', function() {
        const carouselId = $(this).val();
        if ($(this).is(':checked')) {
            selectedCarousels.push(carouselId);
        } else {
            selectedCarousels = selectedCarousels.filter(id => id !== carouselId);
        }
        
        updateBulkActions();
    });
    
    function updateBulkActions() {
        const $bulkActions = $('.bulk-actions');
        if (selectedCarousels.length > 0) {
            $bulkActions.show();
        } else {
            $bulkActions.hide();
        }
    }
    
    // Search and filter functionality
    $('#carousel-search').on('input', function() {
        const searchTerm = $(this).val().toLowerCase();
        
        $('.carousel-table-container tbody tr').each(function() {
            const carouselName = $(this).find('.column-name').text().toLowerCase();
            const carouselSlug = $(this).find('.column-shortcode').text().toLowerCase();
            
            if (carouselName.includes(searchTerm) || carouselSlug.includes(searchTerm)) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    });
});